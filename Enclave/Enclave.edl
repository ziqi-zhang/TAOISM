/* Enclave.edl - Top EDL file. */

enclave {
    from "sgx_tstdc.edl" import *;

    trusted {

        public void ecall_init_tensor(uint64_t TenId, [user_check] void* voidDims);

        public void ecall_set_ten(uint64_t TenId, [user_check] void* voidArr); 
        public void ecall_get_ten(uint64_t TenId, [user_check] void* voidArr); 
        public void ecall_set_seed  (uint64_t TenId, uint64_t RawSeed);
        public void ecall_get_random(uint64_t TenId, [user_check] void* voidArr, uint64_t RawSeed);
        public void ecall_add_from_cpu([user_check] void* inputArr, uint64_t dstId);
        public void ecall_sgd_update(uint64_t paramId, uint64_t gradId, uint64_t momentumId,
                             float lr, float momentum, float weight_decay,
                             float dampening, int nesterov, int first_momentum);

        public void ecall_relu(uint64_t TenIdin, uint64_t TenIdout, uint64_t size);
        public void ecall_quant_relu(uint64_t TenIdin, uint64_t TenIdout, uint64_t size, float scale, float v_min, uint8_t zero);

        public void ecall_reluback(uint64_t TenIdout, uint64_t TenIddout, uint64_t TenIddin, uint64_t size);

        public void ecall_initmaxpool(uint64_t FunId, uint64_t TenIdin_trans, uint64_t TenIdout_trans);

        public void ecall_maxpool(uint64_t FunId,
                                            uint64_t TenIdin,
                                            uint64_t TenIdout, 
                                            uint32_t batch,
                                            uint32_t channel,
                                            uint32_t input_height,
                                            uint32_t input_width,
                                            uint32_t output_height,
                                            uint32_t output_width,
                                            uint32_t filter_height,
                                            uint32_t filter_width,
                                            uint32_t row_stride,
                                            uint32_t col_stride,
                                            uint32_t row_pad,
                                            uint32_t col_pad);

        public void ecall_maxpoolback(uint64_t FunId,
                                            uint64_t TenIddout,
                                            uint64_t TenIddin,
                                            uint32_t batch,
                                            uint32_t channel,
                                            uint32_t input_height,
                                            uint32_t input_width,
                                            uint32_t output_height,
                                            uint32_t output_width,
                                            uint32_t filter_height,
                                            uint32_t filter_width,
                                            uint32_t row_stride,
                                            uint32_t col_stride);
                                            
        public void ecall_init_batchnorm(
                uint64_t FunId,
                uint64_t input, uint64_t output, uint64_t gamma, uint64_t beta,
                // uint64_t der_input, uint64_t der_output, uint64_t der_gamma, uint64_t der_beta,
                uint64_t run_mean, uint64_t run_var, uint64_t cur_mean, uint64_t cur_var,
                uint64_t mu,
                uint32_t batch_, uint32_t channel_, uint32_t height_, uint32_t wuint64_th_,
                int affine_, int is_cumulative_, float momentum_, float epsilon_);

        public void ecall_batchnorm_forward(uint64_t FunId, int Training);

        public void ecall_batchnorm_backward(uint64_t FunId);

        public void ecall_stochastic_quantize(uint64_t src_id, uint64_t dst_id, uint64_t q_tag);

        public void ecall_init_sgx_linear(
                uint64_t FunId,
                uint64_t input, uint64_t output, uint64_t weight, uint64_t bias,
                // uint64_t der_input, uint64_t der_output, uint64_t der_weight, uint64_t der_bias,
                uint32_t batch_, uint32_t input_size_, uint32_t output_size_);
        public void ecall_sgx_linear_forward(uint64_t FunId);

        public void ecall_init_sgx_conv(
                uint64_t FunId,
                uint64_t input, uint64_t output, uint64_t weight, uint64_t bias, 
                // uint64_t der_input, uint64_t der_output, uint64_t der_weight, uint64_t der_bias, 
                uint32_t batch_, uint32_t input_h, uint32_t input_w, uint32_t input_c, 
                uint32_t output_h, uint32_t output_w, uint32_t output_c,
                uint32_t kernel, uint32_t padding, uint32_t stride);
        public void ecall_sgx_conv_forward(uint64_t FunId);
    };

    /*
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_print_string([in, string] const char *str);
        void ocall_start_clock();
        double ocall_get_time();
        void ocall_end_clock([in, string] const char *str);
        void* ocall_allocate_mem(int num_byte);
    };
};
